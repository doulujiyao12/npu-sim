on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y g++ make unzip wget libsfml-dev libcairo2-dev xorg cmake

      - name: Cache SystemC
        id: cache-systemc
        uses: actions/cache@v4
        with:
          path: systemc-2.3.3/build
          key: systemc-2.3.3-${{ runner.os }}-build

      - name: Install SystemC 2.3.3
        if: steps.cache-systemc.outputs.cache-hit != 'true'
        run: |
          wget https://accellera.org/images/downloads/standards/systemc/systemc-2.3.3.zip
          unzip systemc-2.3.3.zip
          cd systemc-2.3.3
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$HOME/systemc-2.3.3 \
                  -DCMAKE_INSTALL_LIBDIR=lib-linux64 \
                  -DCMAKE_CXX_STANDARD=17
          make -j$(nproc)
          make install

      - name: Set SystemC environment variables
        run: |
          echo "SYSTEMC_HOME=$HOME/systemc-2.3.3" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$HOME/systemc-2.3.3/lib-linux64:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPLUS_INCLUDE_PATH=$HOME/systemc-2.3.3/include:$CPLUS_INCLUDE_PATH" >> $GITHUB_ENV

      - name: Cache project build
        id: cache-project
        uses: actions/cache@v4
        with:
          path: build
          key: project-build-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt') }}

      - name: Build repository
        run: |
          cmake --version
          mkdir -p build && cd build
          cmake .. -DBUILD_DEBUG_TARGETS=OFF
          make -j$(nproc)

      - name: Test all chores JSON files
        run: |
          set -euo pipefail

          CHORES_DIR="./llm/test/chores"
          HW_CONFIG="$CHORES_DIR/hw_config.json"
          TIMEOUT_SEC=30

          FAIL=0

          for CONFIG in "$CHORES_DIR"/*.json; do
            if [[ "$CONFIG" == "$HW_CONFIG" ]]; then
              continue
            fi

            echo "Testing $CONFIG ..."

            timeout $TIMEOUT_SEC ./npusim --config-file "$CONFIG" --core-config-file "$HW_CONFIG" 2>&1 | \
            awk '
            /\[CATCH_TEST\]/ { found=1; exit }
            /\[ERROR\]/ { error=1; exit }
            END { if(found) exit 0; else if(error) exit 1; else exit 0 }'
            
            AWK_STATUS=$?
            if [[ $AWK_STATUS -eq 0 ]]; then
              echo "PASS: $CONFIG"
            elif [[ $AWK_STATUS -eq 1 ]]; then
              echo "FAIL (error output): $CONFIG"
              FAIL=1
            else
              echo "FAIL (timeout or no [CATCH_TEST]): $CONFIG"
              FAIL=1
            fi
          done

          if [[ $FAIL -ne 0 ]]; then
            echo "Some tests failed"
            exit 1
          fi
